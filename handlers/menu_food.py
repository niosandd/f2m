import asyncio
import logging
import random
import pandas as pd
import telebot
import os

import aiohttp
from PIL import Image
from pyzbar.pyzbar import decode
from io import BytesIO
import requests

import datetime
import time
import sqlite3

from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, \
    ReplyKeyboardMarkup, InlineQuery, InputTextMessageContent, InlineQueryResultArticle
from aiogram.utils.deep_linking import get_start_link

from main import dp, bot, db, config, Tools

from db import Database
import menu

import pyqrcode
import png

token = ""
admin = config()['telegram']['admin']
telepuzik = telebot.TeleBot(token)

icons = {
    "–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏": "ü•ó",
    "–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞": "üç≤",
    "–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞": "üçõ",
    "–ì–∞—Ä–Ω–∏—Ä—ã": "üçö",
    "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–ù–∞–ø–∏—Ç–∫–∏": "‚òï",
    "–ó–∞–≤—Ç—Ä–∞–∫": "üç≥",
    "–£–∂–∏–Ω": "üçΩÔ∏è",
    "–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è": "üç£",
    "–ü–æ–∫–µ": "ü•¢",
    "–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏": "üßä",
    "–ó–∞–∫—É—Å–∫–∏": "üòã",
    "–°–∞–ª–∞—Ç—ã": "ü•ó",
    "–°—É–ø—ã": "üç≤",
    "–ü–∞—Å—Ç–∞": "üçù",
    "–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏": "üî•",
    "–•–ª–µ–±": "üçû",
    "–°–æ—É—Å": "üßâ",
    "–î–∞—Ä—ã –º–æ—Ä—è": "ü¶û",
    "–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞": "ü•©",
    "–†–∞–¥–æ—Å—Ç—å": "ü§©",
    "–ü–µ—á–∞–ª—å": "üò¢",
    "–ì–Ω–µ–≤": "üò°",
    "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "üòå",
    "–í–æ–ª–Ω–µ–Ω–∏–µ": "üò¨",
    "–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": "üë©üèª‚Äçüíª",
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "üôãüèª‚Äç‚ôÄÔ∏è",
    "–û–±–ª–æ–º–æ–≤": "‚≠ê",
    "–ò–≤–ª–µ–≤": "‚≠ê",
    1: "ü•á",
    2: "ü•à",
    3: "ü•â",
    4: "4Ô∏è‚É£",
    5: "5Ô∏è‚É£",
    6: "6Ô∏è‚É£",
    7: "7Ô∏è‚É£",
    8: "8Ô∏è‚É£",
    9: "9Ô∏è‚É£",
    10: "üîü",
    11: "1Ô∏è‚É£1Ô∏è‚É£",
    12: "1Ô∏è‚É£2Ô∏è‚É£",
    13: "1Ô∏è‚É£3Ô∏è‚É£",
    14: "1Ô∏è‚É£4Ô∏è‚É£",
    15: "1Ô∏è‚É£5Ô∏è‚É£",
    16: "1Ô∏è‚É£6Ô∏è‚É£",
    17: "1Ô∏è‚É£7Ô∏è‚É£",
    18: "1Ô∏è‚É£8Ô∏è‚É£",
    19: "1Ô∏è‚É£9Ô∏è‚É£",
    20: "2Ô∏è‚É£0Ô∏è‚É£",
    21: "2Ô∏è‚É£1Ô∏è‚É£",
    22: "2Ô∏è‚É£2Ô∏è‚É£",
    23: "2Ô∏è‚É£3Ô∏è‚É£",
    24: "2Ô∏è‚É£4Ô∏è‚É£",
    25: "2Ô∏è‚É£5Ô∏è‚É£",
    26: "2Ô∏è‚É£6Ô∏è‚É£",
    27: "2Ô∏è‚É£7Ô∏è‚É£",
    28: "2Ô∏è‚É£8Ô∏è‚É£",
    29: "2Ô∏è‚É£9Ô∏è‚É£",
    30: "3Ô∏è‚É£0Ô∏è‚É£",
    31: "3Ô∏è‚É£1Ô∏è‚É£",
    32: "3Ô∏è‚É£2Ô∏è‚É£",
    33: "3Ô∏è‚É£3Ô∏è‚É£",
    34: "3Ô∏è‚É£4Ô∏è‚É£",
    35: "3Ô∏è‚É£5Ô∏è‚É£",
    36: "3Ô∏è‚É£6Ô∏è‚É£",
    37: "3Ô∏è‚É£7Ô∏è‚É£",
    38: "3Ô∏è‚É£8Ô∏è‚É£",
    39: "3Ô∏è‚É£9Ô∏è‚É£",
    40: "4Ô∏è‚É£0Ô∏è‚É£",
    41: "4Ô∏è‚É£1Ô∏è‚É£",
    42: "4Ô∏è‚É£2Ô∏è‚É£",
    43: "4Ô∏è‚É£3Ô∏è‚É£",
    44: "4Ô∏è‚É£4Ô∏è‚É£",
    45: "4Ô∏è‚É£5Ô∏è‚É£",
    46: "4Ô∏è‚É£6Ô∏è‚É£",
    47: "4Ô∏è‚É£7Ô∏è‚É£",
    48: "4Ô∏è‚É£8Ô∏è‚É£",
    49: "4Ô∏è‚É£9Ô∏è‚É£",
    50: "5Ô∏è‚É£0Ô∏è‚É£"
}

"""
–í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
"""


@dp.callback_query_handler(text_contains=f"food_mood")
async def food_mood(call: types.CallbackQuery):
    user = call.from_user.id
    data = call.data.split('_')
    if db.get_users_ban(user):
        return None

    # –î–µ–π—Å—Ç–≤–∏–µ:
    db.set_client_temp_mood(user, None)
    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text=f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µüëá</b>",
        reply_markup=buttons_food_00()
    )
    db.set_users_mode(user, message_obj.message_id, 'food_mood')


def buttons_food_00():
    menu = InlineKeyboardMarkup(row_width=3)

    btn1 = InlineKeyboardButton(text=f"–†–∞–¥–æ—Å—Ç—å {icons['–†–∞–¥–æ—Å—Ç—å']}",
                                callback_data="food_choose_get_–†–∞–¥–æ—Å—Ç—å")

    btn2 = InlineKeyboardButton(text=f"–ü–µ—á–∞–ª—å {icons['–ü–µ—á–∞–ª—å']}",
                                callback_data="food_choose_get_–ü–µ—á–∞–ª—å")

    btn3 = InlineKeyboardButton(text=f"–ì–Ω–µ–≤ {icons['–ì–Ω–µ–≤']}",
                                callback_data="food_choose_get_–ì–Ω–µ–≤")

    btn4 = InlineKeyboardButton(text=f"–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ {icons['–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ']}",
                                callback_data="food_choose_get_–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ")

    btn5 = InlineKeyboardButton(text=f"–í–æ–ª–Ω–µ–Ω–∏–µ {icons['–í–æ–ª–Ω–µ–Ω–∏–µ']}",
                                callback_data="food_choose_get_–í–æ–ª–Ω–µ–Ω–∏–µ")

    btn9 = InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥",
                                callback_data="menu_start")

    menu.add(btn1, btn2, btn3)
    menu.add(btn4, btn5)
    menu.add(btn9)

    return menu


"""
–í—ã–±—Ä–∞—Ç—å —Å–∞–º–æ–º—É –∏–ª–∏ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
"""


# @dp.callback_query_handler(text_contains=f"food_choose_get")
# async def food_choose_get(call: types.CallbackQuery):
#     user = call.from_user.id
#     data = call.data.split('_')
#     if db.get_users_ban(user):
#         return None
#
#         # –î–µ–π—Å—Ç–≤–∏–µ:
#     if len(data) > 2:
#         db.set_client_temp_mood(user, data[-1])
#
#     # db.set_client_temp_rest(user, None)  –ó–∞—á–µ–º —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω–∞–¥–æ?
#     message_obj = await bot.edit_message_text(
#         chat_id=user,
#         message_id=call.message.message_id,
#         text=f"<b>–û—Ç–ª–∏—á–Ω–æ! –ú—ã —É—á–ª–∏ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!</b> ü§ù\n\n"
#         # f"–ù–µ –∑–Ω–∞–µ—à—å, –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –ñ–º–∏ –∫–Ω–æ–ø–∫—É <b>¬´–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å? üí´¬ª</b>\n"
#         # f"<blockquote>–ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –º–µ—Å—Ç–æ, –≥–¥–µ —Ç–µ–±–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æüíÜ‚Äç‚ôÇÔ∏èüíÜ‚Äç‚ôÄÔ∏è</blockquote>\n\n"
#              f"<i>–£–∂–µ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏?</i> –ï—Å–ª–∏ –Ω–µ—Ç, –º—ã –ø–æ–º–æ–∂–µ–º –µ–≥–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å! üîç"
#              f"\n",
#         reply_markup=buttons_food_01()
#     )
#     db.set_users_mode(user, message_obj.message_id, 'food_choose_get')

def get_user_profile_text(user_id):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    sex = db.get_client_sex(user_id)
    age = db.get_client_age(user_id)
    style = db.get_client_style(user_id)
    blacklist = db.get_client_blacklist(user_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —Ä–∞–≤–Ω—ã None
    sex = sex if sex and sex != 'None' else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ü§∑'
    age = age if age and age != 'None' else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ü§∑'
    style = style if style and style != 'None' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ü•ò'
    blacklist = blacklist if blacklist and blacklist != 'None' else '–ø—É—Å—Ç–æ ‚≠ïÔ∏è'

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"<b>–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ üìÉ</b>\n\n"
        f"-----------–ü–æ–ª----------\n"
        f"{sex}\n\n"
        f"---------–í–æ–∑—Ä–∞—Å—Ç---------\n"
        f"{age}\n\n"
        f"-----–°—Ç–∏–ª—å –ø–∏—Ç–∞–Ω–∏—è-----\n"
        f"{style}\n\n"
        f"----------–ù–ï –ï–®–¨----------\n"
        f"{blacklist}"
    )
    return message_text


@dp.callback_query_handler(text_contains=f"food_choose_get")
async def food_choose_get(call: types.CallbackQuery):
    user = call.from_user.id
    data = call.data.split('_')
    if db.get_users_ban(user):
        return None

    if len(data) > 2:
        db.set_client_temp_mood(user, data[-1])

    last_qr_time = db.get_client_last_qr_time(user)

    if (round(time.time()) - last_qr_time) // 3600 <= 3:
        message_text = get_user_profile_text(user)

        message_obj = await bot.edit_message_text(
            chat_id=user,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=buttons_food_01()
        )
        db.set_users_mode(user, message_obj.message_id, 'food_choose_get')
    else:

        message_text = "–ù–µ –∑–Ω–∞–µ—à—å –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å? üßê \n\n"\
                       "<b>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç food2mood  –ø–æ–¥–æ–±—Ä–∞–ª –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ–¥ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!</b>"

        message_obj = await bot.edit_message_text(
            chat_id=user,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=buttons_food_001()
        )
        db.set_users_mode(user, message_obj.message_id, 'food_inline_handler_y')


def buttons_food_001():
    menu = InlineKeyboardMarkup(row_width=3)

    btn1 = InlineKeyboardButton(text="–ú–æ—è –ø–æ–¥–±–æ—Ä–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π üîç", switch_inline_query_current_chat='')
    btn9 = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                                callback_data="food_mood")
    menu.add(btn1)
    menu.add(btn9)

    return menu


@dp.message_handler(commands=['form'])
async def send_profile(message: types.Message):
    user = message.from_user.id
    message_text = get_user_profile_text(user)
    await message.answer(text=message_text, reply_markup=buttons_food_01())


def buttons_food_01():
    menu = InlineKeyboardMarkup(row_width=3)

    # btn1 = InlineKeyboardButton(text="–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ üçΩÔ∏è", callback_data="food_restaurant")
    # # btn3 = InlineKeyboardButton(text="–£–∂–µ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ üì∏", callback_data="scan_qrcode")
    # btn3 = InlineKeyboardButton(text="–£–∂–µ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ ü•ò", callback_data="scanned_qrcode")
    # # btn2 = InlineKeyboardButton(text="–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å? üí´", callback_data="food_choose_random")
    # btn9 = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="food_mood")
    # menu.add(btn3)
    # # menu.add(btn2)
    # menu.add(btn1)
    # menu.add(btn9)
    btn1 = InlineKeyboardButton(text="–í—Å–µ —Ç–∞–∫! ‚úÖ", callback_data="scanned_qrcode")
    btn2 = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù", callback_data="client_register_again")

    menu.add(btn1)
    menu.add(btn2)
    return menu


# def buttons_food_01():
#     menu = InlineKeyboardMarkup(row_width=3)
#
#     btn1 = InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ üç§", callback_data="food_restaurant")
#     btn3 = InlineKeyboardButton(text="üì∏ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥", callback_data="scan_qrcode")
#     btn2 = InlineKeyboardButton(text="–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å? üí´", callback_data="food_choose_random")
#     btn9 = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="food_mood")
#     menu.add(btn1)
#     menu.add(btn2)
#     menu.add(btn3)
#     menu.add(btn9)
#
#     return menu


"""
–í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
"""


@dp.callback_query_handler(text_contains=f"food_restaurant")
async def food_restaurant(call: types.CallbackQuery):
    user = call.from_user.id
    data = call.data.split('_')
    if db.get_users_ban(user):
        return None

    # –î–µ–π—Å—Ç–≤–∏–µ:
    # db.set_client_temp_rest(user, None) –ó–∞—á–µ–º —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω–∞–¥–æ?

    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text=f"<b>–í—ã–±–µ—Ä–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –ø–æ–∏—Å–∫–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—éüëáüèª\n</b>",
        reply_markup=buttons_food_02()
    )
    db.set_users_mode(user, message_obj.message_id, 'food_inline_handler')


def buttons_food_02():
    menu = InlineKeyboardMarkup(row_width=3)

    btn1 = InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –∫–∞—Ñ–µ", switch_inline_query_current_chat='')
    btn9 = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                                callback_data="food_mood")
    menu.add(btn1)
    menu.add(btn9)

    return menu


@dp.callback_query_handler(lambda call: call.data == "scanned_qrcode")
async def request_qr_photo(call: types.CallbackQuery):
    user = call.from_user.id
    try:
        temp = db.get_client_temp_rest(user).split(':')
        if len(temp) == 1:
            await bot.edit_message_text(
                chat_id=user,
                message_id=call.message.message_id,
                text="–ù–µ –∑–Ω–∞–µ—à—å –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å? üßê\n\n"
                     "<b>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç food2mood –ø–æ–¥–æ–±—Ä–∞–ª –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ–¥ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!</b>",
                reply_markup=get_back())
            db.set_users_mode(user, call.message.message_id, 'food_inline_handler')
        else:
            rest_name, rest_address = db.get_client_temp_rest(user).split(':')
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
            await dp.storage.set_data(user=user, data={'rest_name': rest_name, 'rest_address': rest_address})

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            user_data = await dp.storage.get_data(user=user)
            await bot.edit_message_text(
                chat_id=user,
                message_id=call.message.message_id,
                text=f"ü§îüìç –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –∫–∞—Ñ–µ <b>¬´{rest_name}¬ª</b>, –ø–æ –∞–¥—Ä–µ—Å—É: {rest_address}? \n\n"
                     f"<i>–ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –Ω–∞ —Ñ–ª–∞–µ—Ä–µ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞</i>",
                reply_markup=qr_scanned())
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == "scan_qrcode")
async def request_qr_photo(call: types.CallbackQuery):
    user = call.from_user.id

    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text="üîç –î—Ä—É–≥, —Å–∫–æ—Ä–µ–π <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π</b> QR-–∫–æ–¥ —Å–≤–æ–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è <b>–∏ –ø—Ä–∏—Å—ã–ª–∞–π</b> –µ–≥–æ –Ω–∞–º –≤ —á–∞—Ç! \n\n"
             "–¢—ã –Ω–∞–π–¥–µ—à—å –µ–≥–æ –Ω–∞ –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –±—É–∫–ª–µ—Ç–∞ —Å "
             "QR-–∫–æ–¥–æ–º —Å–∞–º–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ food2mood –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏üîñ \n\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ –ª–∏—à—å:"
             "<blockquote>üìé->ü§≥-> üì∏ -> üîñ-> üì§</blockquote>",
        reply_markup=get_back())


def get_back():
    keyboard = InlineKeyboardMarkup(row_width=1)

    btn2 = InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                callback_data="food_choose_get")

    btn1 = InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –∫–∞—Ñ–µ", switch_inline_query_current_chat='')
    keyboard.add(btn1, btn2)
    return keyboard


token = ""


@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message: types.Message):
    user_id = message.from_user.id
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        file_info = await bot.get_file(message.photo[-1].file_id)
        file_path = f'https://api.telegram.org/file/bot{token}/{file_info.file_path}'

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º requests (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        file = requests.get(file_path)
        image = Image.open(BytesIO(file.content))

        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞
        qr_result = decode(image)
        if qr_result:
            decoded_data = qr_result[0].data.decode()
            # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ QR –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å
            search_query = decoded_data.split('/')[-1]  # –∏–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            await search_and_select_restaurant(user_id, search_query)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        else:
            await bot.send_message(user_id, "QR-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                   reply_markup=qr_scanned_keyboard_none())
    except Exception as e:
        await bot.reply_to(message, str(e))
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π QR-–∫–æ–¥–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


user_data = {}


async def search_and_select_restaurant(user_id, query):
    posts = db.restaurants_find_all(query.capitalize()) if len(query) > 0 else db.restaurants_get_all()

    if not posts:
        await bot.send_message(user_id, "–†–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç üòî", reply_markup=qr_scanned_keyboard_none())

    else:
        first_restaurant = posts[0]
        rest_name = first_restaurant[1]
        rest_address = first_restaurant[2]
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
        await dp.storage.set_data(user=user_id, data={'rest_name': rest_name, 'rest_address': rest_address})

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        user_data = await dp.storage.get_data(user=user_id)
        await bot.send_message(user_id,
                               f"ü§îüìç –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –∫–∞—Ñ–µ <b>¬´{first_restaurant[1]}¬ª</b>, –ø–æ –∞–¥—Ä–µ—Å—É: {first_restaurant[2]}?",
                               reply_markup=qr_scanned_keyboard())


def qr_scanned_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)
    choose_category_button = InlineKeyboardButton(text=f'–î–∞, —è –∑–¥–µ—Å—å!', callback_data=f'apply_')
    change_restaurant_button = InlineKeyboardButton(text="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="scan_qrcode")
    change_mood_button = InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="scan_qrcode")
    keyboard.row(choose_category_button)
    keyboard.row(change_restaurant_button)
    keyboard.row(change_mood_button)
    return keyboard


def qr_scanned():
    keyboard = InlineKeyboardMarkup(row_width=3)
    # choose_category_button = InlineKeyboardButton(text=f'–î–∞, —è –∑–¥–µ—Å—å!', callback_data=f'apply_')
    choose_category_button = InlineKeyboardButton(text=f'–î–∞, —è –∑–¥–µ—Å—å!', callback_data=f'food_rec_–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥')
    change_mood_button = InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="food_choose_get")
    keyboard.row(choose_category_button)
    keyboard.row(change_mood_button)
    return keyboard


def qr_scanned_keyboard_none():
    keyboard = InlineKeyboardMarkup(row_width=3)
    change_restaurant_button = InlineKeyboardButton(text="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="scan_qrcode")
    change_mood_button = InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="scan_qrcode")
    keyboard.add(change_restaurant_button, change_mood_button)
    return keyboard


# def qr_scanned_keyboard(rest_name):
#     keyboard = InlineKeyboardMarkup(row_width=3)
#     choose_category_button = InlineKeyboardButton(text="–î–∞, —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —ç—Ç–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
#                                                   switch_inline_query_current_chat=f'{rest_name}')
#
#     change_restaurant_button = InlineKeyboardButton(text="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="scan_qrcode")
#     change_mood_button = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="food_mood")
#     keyboard.add(choose_category_button, change_restaurant_button, change_mood_button)
#     return keyboard
# def qr_scanned_keyboard(rest_name):
#     keyboard = InlineKeyboardMarkup(row_width=3)
#     choose_category_button = InlineKeyboardButton(text=f'–î–∞, —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —ç—Ç–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ', callback_data=f'apply_{rest_name}')
#     change_restaurant_button = InlineKeyboardButton(text="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="scan_qrcode")
#     change_mood_button = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="food_mood")
#     keyboard.add(choose_category_button, change_restaurant_button, change_mood_button)
#     return keyboard
#
# def qr_scanned_keyboard_none():
#     keyboard = InlineKeyboardMarkup(row_width=3)
#     change_restaurant_button = InlineKeyboardButton(text="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="scan_qrcode")
#     change_mood_button = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="food_mood")
#     keyboard.add(change_restaurant_button, change_mood_button)
#     return keyboard


"""
–í—ã–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""


async def food_rec_get(user, message):
    mode = db.get_users_mode(user)
    data = message.text.split(':')

    # –î–µ–π—Å—Ç–≤–∏–µ:
    db.set_client_temp_rest(user, f"{data[0]}:{data[1]}")
    db.set_client_temp_recommendation(user, None)
    if db.check_basket_exists(user):
        db.set_basket(user, "{}")

    rest = db.get_client_temp_rest(user).split(':')
    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=mode['id'],
        text=f"–í—ã–±–µ—Ä–∏, —á—å–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—åüëá",
        reply_markup=buttons_food_03(rest[0])
    )
    db.set_users_mode(user, message_obj.message_id, 'food_rec')


# @dp.callback_query_handler(text_contains=f"apply_restaurant")
# async def food_rec_get3(call: types.CallbackQuery):
#     user = call.from_user.id
#     dp.send_message(call.from_user.id, "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—ë –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")
#
#     db.set_users_mode(user, call.message_obj.message_id, 'apply_restaurant')

# –ö–õ–ê–°–°–°–°

# @dp.callback_query_handler(lambda c: c.data == 'apply_restaurant_confirmed')
# async def restaurant_confirmation(call: types.CallbackQuery):
#     # –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     user_id = call.from_user.id
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ "—Å–æ–æ–±—â–µ–Ω–∏—è" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª "–ü—Ä–∏–≤–µ—Ç, –ë–æ—Ç"
#     await process_user_message(user_id, '–ü—Ä–∏–≤–µ—Ç, –ë–æ—Ç')
#     # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
#     await call.answer("–í–∞—à–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.", show_alert=True)
#
# async def process_user_message(user_id: int, message_text: str):
#     # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
#     print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message_text}")
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#     # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è –ª–æ–≥–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await bot.send_message(chat_id=user_id, text=f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {message_text}")

# @dp.inline_handler(lambda c: c.data and c.data.startswith('apply_restaurant_confirmed'))
# async def inline_echo(inline_query: InlineQuery):
#     user_id = inline_query.from_user.id
#     # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ "–ü–†–ò–í–ï–¢ –ë–û–¢" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     result = InlineQueryResultArticle(
#         id='unique_id',  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
#         title="–°–∫–∞–∑–∞—Ç—å '–ü–†–ò–í–ï–¢ –ë–û–¢'",
#         input_message_content=InputTextMessageContent("–ü–†–ò–í–ï–¢ –ë–û–¢")
#     )
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await inline_query.answer([result], cache_time=1)

# @dp.callback_query_handler(text_contains=f"apply_")
# async def food_rec_get3(call: types.CallbackQuery):
#     user = call.from_user.id
#     _, rest_name = call.data.split('_')
#     await bot.send_message(call.from_user.id, f"—Å–æ—Å–∏ {rest_name}")
#     # await food_rec_get_inside(user, call.message)

@dp.callback_query_handler(text_contains=f"apply_")
async def food_rec_get3(call: types.CallbackQuery):
    user = call.from_user.id
    mode = db.get_users_mode(user)

    user_data = await dp.storage.get_data(user=user)
    # await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id) –ë–æ–ª–µ–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ

    rest_name = user_data.get('rest_name')
    rest_address = user_data.get('rest_address')

    db.set_client_temp_rest(user, f"{rest_name}:{rest_address}")
    db.set_client_temp_recommendation(user, None)
    if db.check_basket_exists(user):
        db.set_basket(user, "{}")

    rest = db.get_client_temp_rest(user).split(':')
    message_obj = await bot.edit_message_text(
        chat_id=user,
        # message_id=mode['id'],
        message_id=call.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏, —á—å–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å üëáüèª",
        reply_markup=buttons_food_03(rest[0])
    )
    db.set_users_mode(user, message_obj.message_id, 'food_rec')


@dp.callback_query_handler(text_contains=f"food_rec_get2")
async def food_rec_get2(call: types.CallbackQuery):
    user = call.from_user.id
    data = call.data.split('_')
    if db.get_users_ban(user):
        return None

    # –î–µ–π—Å—Ç–≤–∏–µ:
    db.set_client_temp_recommendation(user, None)

    rest = db.get_client_temp_rest(user).split(':')
    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏, —á—å–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å üëáüèª",
        reply_markup=buttons_food_03(rest[0])
    )
    db.set_users_mode(user, message_obj.message_id, 'food_rec_get2')


def buttons_food_03(rest: str):
    menu = InlineKeyboardMarkup(row_width=2)

    if db.restaurants_get_dish_rec_nutritionist(rest):
        btn1 = InlineKeyboardButton(text=f"üë®‚Äç‚öïÔ∏è –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥",
                                    callback_data="food_rec_–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥")
        menu.row(btn1)

    if db.restaurants_get_dish_rec_community(rest):
        btn2 = InlineKeyboardButton(text=f" üôãüèª‚Äç‚ôÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                                    callback_data="food_rec_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        menu.row(btn2)

    if db.restaurants_get_dish_rec_a_oblomov(rest):
        btn3 = InlineKeyboardButton(text=f"‚≠ê –û–±–ª–æ–º–æ–≤",
                                    callback_data="food_rec_–û–±–ª–æ–º–æ–≤")
        menu.row(btn3)

    if db.restaurants_get_dish_rec_a_ivlev(rest):
        btn4 = InlineKeyboardButton(text=f"‚≠ê –ò–≤–ª–µ–≤",
                                    callback_data="food_rec_–ò–≤–ª–µ–≤")
        menu.row(btn4)

    btn9 = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –∫–∞—Ñ–µ",
                                callback_data="food_restaurant")
    menu.add(btn9)

    return menu


"""
–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
"""


@dp.callback_query_handler(text_contains=f"back_to_categories")
async def back_to_categories(call: types.CallbackQuery):
    user = call.from_user.id

    rest_name = db.get_client_temp_rest(user).split(':')[0]
    available_categories = db.restaurants_get_all_categories(rest_name)
    if db.get_users_ban(user):
        return None

        # –î–µ–π—Å—Ç–≤–∏–µ:
    db.set_client_temp_category(user, None)

    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text=f"<b>–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üîç</b>\n\n"
             f"<i>PS: –æ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Ç–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç\n</i>",
        reply_markup=buttons_food_04(available_categories)
    )
    db.set_users_mode(user, message_obj.message_id, 'food_rec')


def generate_recommendation(user):
    mood = db.get_client_temp_mood(user)
    style = db.get_client_style(user)
    blacklist = db.get_client_blacklist(user)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –º–µ–Ω—é
    df = pd.DataFrame(db.recommendations_get_all(), columns=[
        'id',
        '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
        '–ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        '–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞',
        '–û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞',
        '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',
        '–°—Ç–∏–ª—å –ø–∏—Ç–∞–Ω–∏—è',
        '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
        '–°—Å—ã–ª–∫–∞'
    ])

    # –í—ã–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ –º–µ–Ω—é, —á—Ç–æ —Å–µ–π—á–∞—Å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç
    df = df[df['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'].str.contains(mood)]
    df = df[df['–°—Ç–∏–ª—å –ø–∏—Ç–∞–Ω–∏—è'].str.contains(style)]

    if df.empty:
        return None, None

    dishes = []
    for dish in df.values.tolist():
        dish_ingredients = [ingredient.strip() for ingredient in str(dish[6]).lower().split(',')]

        if menu.check_blacklist_with_ai(blacklist, dish_ingredients):
            print("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª—é–¥–æ –∏–∑-–∑–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:", dish[4])
            print("–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:", blacklist)
            print("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –±–ª—é–¥–∞:", dish_ingredients)
            continue

        dishes.append({
            "–†–µ—Å—Ç–æ—Ä–∞–Ω": dish[1],
            "–ê–¥—Ä–µ—Å": dish[2],
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": dish[3],
            "–ù–∞–∑–≤–∞–Ω–∏–µ": dish[4],
        })

    if dishes:
        recommendation = []
        banned_categories = []
        banned_dishes = []
        for _ in range(5):
            dish = random.choice(dishes)
            if dish['–ù–∞–∑–≤–∞–Ω–∏–µ'] not in banned_dishes and dish["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] not in banned_categories:
                recommendation.append((dish["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], dish["–ù–∞–∑–≤–∞–Ω–∏–µ"]))
                banned_categories.append(dish["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"])
                banned_dishes.append(dish["–ù–∞–∑–≤–∞–Ω–∏–µ"])
        return recommendation
    else:
        return None


@dp.callback_query_handler(text_contains=f"food_rec")
async def food_rec(call: types.CallbackQuery):
    user = call.from_user.id
    data = call.data.split('_')
    if db.get_users_ban(user):
        return None

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
    # if call.data == "food_rec_–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥":
    #     sticker_message = await bot.send_sticker(
    #         chat_id=user,
    #         sticker='CAACAgIAAxkBAAEFcOlmRG4AAaLHIqgW8CtAOWHhGN6y4XgAAkRYAAJCaghK0Zngs-8IqK81BA'
    #     )
    #     await asyncio.sleep(3)
    #     await bot.delete_message(chat_id=user, message_id=sticker_message.message_id)

    # –î–µ–π—Å—Ç–≤–∏–µ:
    db.set_client_temp_category(user, None)
    if len(data) > 2:
        db.set_client_temp_recommendation(user, data[-1])

    recommendation_text = "<b>ü•á –¢–û–ü –±–ª—é–¥ –∫–∞—Ñ–µ ... –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</b>\n\n"
    try:
        recommendation = generate_recommendation(user)
        print(recommendation)
        for dish in recommendation:
            recommendation_text += f"{dish[0]}\n{dish[1]}\n\n"
    except Exception as e:
        print(e)
    recommendation_text +=\
        "<b>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –±–ª—é–¥–∞—Ö –±–æ–ª—å—à–µ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–∏–º–∞–π –ú–µ–Ω—é üëá</b>"

    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text=recommendation_text,
        reply_markup=menu_button()
    )
    db.set_client_rec_message_id(user, call.message.message_id)
    db.set_users_mode(user, message_obj.message_id, 'food_rec')


async def food_rec2(user, data):
    mode = db.get_users_mode(user)
    rest_name = db.get_client_temp_rest(user).split(':')[0]
    if db.get_users_ban(user):
        return None

    # –î–µ–π—Å—Ç–≤–∏–µ:
    db.set_client_temp_category(user, None)
    if len(data) > 2:
        db.set_client_temp_recommendation(user, data[-1])

    recommendation_text = "<b>ü•á –¢–û–ü –±–ª—é–¥ –∫–∞—Ñ–µ ... –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</b>\n\n"
    try:
        recommendation = generate_recommendation(user)
        print(recommendation)
        for dish in recommendation:
            recommendation_text += f"{dish[0]}\n{dish[1]}\n\n"
    except Exception as e:
        print(e)
    recommendation_text +=\
        "<b>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –±–ª—é–¥–∞—Ö –±–æ–ª—å—à–µ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–∏–º–∞–π –ú–µ–Ω—é üëá</b>"

    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=mode['id'],
        text=recommendation_text,
        reply_markup=menu_button()
    )
    db.set_client_rec_message_id(user, mode['id'])
    db.set_users_mode(user, message_obj.message_id, 'food_rec')


def menu_button():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="show_categories"))
    return markup


@dp.callback_query_handler(text_contains=f"show_categories")
async def show_categories(call: types.CallbackQuery):
    user = call.from_user.id
    rest_name = db.get_client_temp_rest(user).split(':')[0]
    available_categories = db.restaurants_get_all_categories(rest_name)
    if db.get_users_ban(user):
        return None

    message_obj = await bot.send_message(
        chat_id=user,
        text=f"<b>–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üîç</b>\n\n"
             f"<i>PS: –æ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Ç–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç\n</i>",
        reply_markup=buttons_food_04(available_categories)
    )
    db.set_users_mode(user, message_obj.message_id, 'food_rec')


def buttons_food_04(available_categories):
    menu = InlineKeyboardMarkup(row_width=1)

    buttons = [
        InlineKeyboardButton(text=f"–ó–∞–≤—Ç—Ä–∞–∫ {icons['–ó–∞–≤—Ç—Ä–∞–∫']}",
                             callback_data="food_category_–ó–∞–≤—Ç—Ä–∞–∫") if "–ó–∞–≤—Ç—Ä–∞–∫" in available_categories else None,
        InlineKeyboardButton(text=f"–°–∞–ª–∞—Ç—ã/–ó–∞–∫—É—Å–∫–∏ {icons['–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏']}",
                             callback_data="food_category_–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏") if "–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏" in available_categories else None,
        InlineKeyboardButton(text=f"–°–∞–ª–∞—Ç—ã {icons['–°–∞–ª–∞—Ç—ã']}",
                             callback_data="food_category_–°–∞–ª–∞—Ç—ã") if "–°–∞–ª–∞—Ç—ã" in available_categories else None,
        InlineKeyboardButton(text=f"–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏ {icons['–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏']}",
                             callback_data="food_category_–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏") if "–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏" in available_categories else None,
        InlineKeyboardButton(text=f"–ó–∞–∫—É—Å–∫–∏ {icons['–ó–∞–∫—É—Å–∫–∏']}",
                             callback_data="food_category_–ó–∞–∫—É—Å–∫–∏") if "–ó–∞–∫—É—Å–∫–∏" in available_categories else None,
        InlineKeyboardButton(text=f"–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞ {icons['–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞']}",
                             callback_data="food_category_–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞") if "–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞" in available_categories else None,
        InlineKeyboardButton(text=f"–°—É–ø—ã {icons['–°—É–ø—ã']}",
                             callback_data="food_category_–°—É–ø—ã") if "–°—É–ø—ã" in available_categories else None,
        InlineKeyboardButton(text=f"–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏ {icons['–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏']}",
                             callback_data="food_category_–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏") if "–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏" in available_categories else None,
        InlineKeyboardButton(text=f"–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞ {icons['–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞']}",
                             callback_data="food_category_–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞") if "–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞" in available_categories else None,
        InlineKeyboardButton(text=f"–ü–∞—Å—Ç–∞ {icons['–ü–∞—Å—Ç–∞']}",
                             callback_data="food_category_–ü–∞—Å—Ç–∞") if "–ü–∞—Å—Ç–∞" in available_categories else None,
        InlineKeyboardButton(text=f"–î–∞—Ä—ã –º–æ—Ä—è {icons['–î–∞—Ä—ã –º–æ—Ä—è']}",
                             callback_data="food_category_–î–∞—Ä—ã –º–æ—Ä—è") if "–î–∞—Ä—ã –º–æ—Ä—è" in available_categories else None,
        InlineKeyboardButton(text=f"–ì–∞—Ä–Ω–∏—Ä—ã {icons['–ì–∞—Ä–Ω–∏—Ä—ã']}",
                             callback_data="food_category_–ì–∞—Ä–Ω–∏—Ä—ã") if "–ì–∞—Ä–Ω–∏—Ä—ã" in available_categories else None,
        InlineKeyboardButton(text=f"–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è {icons['–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è']}",
                             callback_data="food_category_–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è") if "–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è" in available_categories else None,
        InlineKeyboardButton(text=f"–ü–æ–∫–µ {icons['–ü–æ–∫–µ']}",
                             callback_data="food_category_–ü–æ–∫–µ") if "–ü–æ–∫–µ" in available_categories else None,
        InlineKeyboardButton(text=f"–î–µ—Å–µ—Ä—Ç—ã {icons['–î–µ—Å–µ—Ä—Ç—ã']}",
                             callback_data="food_category_–î–µ—Å–µ—Ä—Ç—ã") if "–î–µ—Å–µ—Ä—Ç—ã" in available_categories else None,
        InlineKeyboardButton(text=f"–ù–∞–ø–∏—Ç–∫–∏ {icons['–ù–∞–ø–∏—Ç–∫–∏']}",
                             callback_data="food_category_–ù–∞–ø–∏—Ç–∫–∏") if "–ù–∞–ø–∏—Ç–∫–∏" in available_categories else None,
        # InlineKeyboardButton(text=f"–•–ª–µ–± {icons['–•–ª–µ–±']}",
        #                      callback_data="food_category_–•–ª–µ–±") if "–•–ª–µ–±" in available_categories else None,
        # InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –∞–≤—Ç–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", callback_data="food_rec_get2")
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="menu_start")
    ]

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è None –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ –º–µ–Ω—é
    for button in filter(None, buttons):
        if button.callback_data != "food_rec_get2":  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª–∏—Å—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–æ–π
            menu.insert(button)
        else:
            menu.add(button)

    return menu


"""
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–ª—é–¥–∞
"""


@dp.callback_query_handler(text_contains=f"food_category")
async def food_category(call: types.CallbackQuery):
    try:
        user = call.from_user.id

        data = call.data.split('_')
        if db.get_users_ban(user):
            return None

        loading_message = await bot.edit_message_text(
            chat_id=user,
            message_id=call.message.message_id,
            text=f"–û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É... ‚è≥"
        )

        # –î–µ–π—Å—Ç–≤–∏–µ:
        category = '_'.join(data[2:])  # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        if category:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            db.set_client_temp_category(user, category)

        rest = db.get_client_temp_rest(user).split(':')
        db.set_client_temp_dish(user, 0)
        dish, length, numb = menu.get_dish(user)

        if dish is not None:
            # ingredients = ""
            # for ing in dish['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']:
            #     ingredients += f"‚Ä¢ {str(ing).strip()}\n"
            if dish['–†–µ—Å—Ç–æ—Ä–∞–Ω'] == "–ë–ª–∞–Ω –¥–µ –ë–ª–∞–Ω":
                text = (  # f"üç§ <b>–ö–∞—Ñ–µ:</b>\n"
                    # f"<i>¬´{dish['–†–µ—Å—Ç–æ—Ä–∞–Ω']}¬ª, {dish['–ê–¥—Ä–µ—Å']}</i>\n"
                    # f"\n"
                    f"‚Äî‚Äî {icons[dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']]} <b>{dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}</b> ‚Äî‚Äî\n"
                    f"\n"
                    f"{icons[length - numb]} <i>{dish['–ù–∞–∑–≤–∞–Ω–∏–µ']}</i>\n\n"
                    f"üí∞ <i>–¶–µ–Ω–∞: {dish['–¶–µ–Ω–∞']} —Ä—É–±.</i>\n"
                    f"‚öñÔ∏è <i>–í–µ—Å: {str(dish['–ì—Ä–∞–º–º'])} –≥.</i>"
                    f"\n\n"
                    # f"üßæ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
                    # f"<code>{ingredients}</code>\n"
                    f"‚Äî‚Äî {icons[dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']]} <b>{dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']}</b> ‚Äî‚Äî\n"
                    f"\n"
                    f"<blockquote><i>üë®üèº‚Äç‚öïÔ∏è: {dish['–û–ø–∏—Å–∞–Ω–∏–µ'].split(';')[0]}</i></blockquote>\n\n"
                    f"üìù–ö–ë–ñ–£ –±–ª—é–¥–∞ :\n <tg-spoiler><i>{dish['–û–ø–∏—Å–∞–Ω–∏–µ'].split(';')[1]}</i></tg-spoiler>\n"
                    f"\n"
                    f"<i>–õ–∏—Å—Ç–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ¬´ –∏ ¬ªüëáüèª</i>\n\n"
                    f"<b>–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–ª—é–¥–æ? –î–æ–±–∞–≤—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí</b>")
            else:
                text = (  # f"üç§ <b>–ö–∞—Ñ–µ:</b>\n"
                    # f"<i>¬´{dish['–†–µ—Å—Ç–æ—Ä–∞–Ω']}¬ª, {dish['–ê–¥—Ä–µ—Å']}</i>\n"
                    # f"\n"
                    f"‚Äî‚Äî {icons[dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']]} <b>{dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}</b> ‚Äî‚Äî\n"
                    f"\n"
                    f"{icons[length - numb]} <i>{dish['–ù–∞–∑–≤–∞–Ω–∏–µ']}</i>\n\n"
                    f"üí∞ <i>–¶–µ–Ω–∞: {dish['–¶–µ–Ω–∞']} —Ä—É–±.</i>\n"
                    f"‚öñÔ∏è <i>–í–µ—Å: {str(dish['–ì—Ä–∞–º–º'])} –≥.</i>"
                    f"\n\n"
                    # f"üßæ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
                    # f"<code>{ingredients}</code>\n"
                    f"‚Äî‚Äî {icons[dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']]} <b>{dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']}</b> ‚Äî‚Äî\n"
                    f"\n"
                    f"<blockquote><i>üë®üèº‚Äç‚öïÔ∏è: {dish['–û–ø–∏—Å–∞–Ω–∏–µ'].split(';')[0]}</i></blockquote>\n\n"
                    f"üìù–ö–ë–ñ–£ –Ω–∞ 100 –≥. :\n <tg-spoiler><i>{dish['–û–ø–∏—Å–∞–Ω–∏–µ'].split(';')[1]}</i></tg-spoiler>\n"
                    f"\n"
                    f"<i>–õ–∏—Å—Ç–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ¬´ –∏ ¬ªüëáüèª</i>\n\n"
                    f"<b>–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–ª—é–¥–æ? –î–æ–±–∞–≤—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí</b>")
            if db.check_basket_exists(user):
                basket = eval(db.get_basket(user))
                if dish['–ù–∞–∑–≤–∞–Ω–∏–µ'] in basket:
                    in_basket = True
                else:
                    in_basket = False
            else:
                in_basket = False
            message_obj = await bot.edit_message_text(
                chat_id=user,
                message_id=loading_message.message_id,
                text=text,
                reply_markup=buttons_food_05(db.get_client_temp_dish(user), length, numb, in_basket)
            )
            db.set_client_can_alert(user, round(time.time()))
            db.set_client_temp_dish_id(user, db.restaurants_get_dish(rest[0], rest[1], dish['–ù–∞–∑–≤–∞–Ω–∏–µ'])[0])
        else:
            message_obj = await bot.edit_message_text(
                chat_id=user,
                message_id=loading_message.message_id,
                text=f"üç§ <b>–ö–∞—Ñ–µ:</b>\n"
                     f"<i>¬´{rest[0]}¬ª, {rest[1]}</i>\n"
                     f"\n"
                     f"‚Äî‚Äî‚Äî {icons[db.get_client_temp_category(user)]} <b>{db.get_client_temp_category(user)}</b> ‚Äî‚Äî‚Äî\n"
                     f"\n"
                     f"<b>–ö–∞–∂–µ—Ç—Å—è, –≤ —ç—Ç–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–µ—Ç –±–ª—é–¥, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏</b> ü§î\n"
                     f"\n"
                     f"–ü–æ–ø—Ä–æ–±—É–π –ø–æ–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—à—å –≤ –ø–∏—â—É üòâ\n"

                     f"‚Äî‚Äî‚Äî {icons[db.get_client_temp_mood(user)]} <b>{db.get_client_temp_mood(user)}</b> ‚Äî‚Äî‚Äî\n",
                reply_markup=buttons_food_05(None, None, None, None)
            )
        db.set_users_mode(user, message_obj.message_id, 'food_category')
    except Exception as e:
        print(e)


@dp.callback_query_handler(text_contains=f"send_dish")
async def send_dish(call: types.CallbackQuery):
    try:
        user = call.from_user.id
        data = call.data.split('_')
        if db.get_users_ban(user):
            return None

        if "del" in data[-1]:
            try:
                message_id = call.data.split("send_dish_del")[-1]
                await bot.delete_message(user, int(message_id))
            except TypeError:
                pass
            except Exception as e:
                print(e)

        # –î–µ–π—Å—Ç–≤–∏–µ:

        if data[-1] == 'next':
            db.set_client_temp_dish(user, db.get_client_temp_dish(user) + 1)
        elif data[-1] == 'back':
            db.set_client_temp_dish(user, db.get_client_temp_dish(user) - 1)

        rest = db.get_client_temp_rest(user).split(':')
        dish, length, numb = menu.get_dish(user)

        # ingredients = ""
        # for ing in dish['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']:
        #     ingredients += f"‚Ä¢ {str(ing).strip()}\n"
        if dish['–†–µ—Å—Ç–æ—Ä–∞–Ω'] == "–ë–ª–∞–Ω –¥–µ –ë–ª–∞–Ω":
            text = (  # f"üç§ <b>–ö–∞—Ñ–µ:</b>\n"
                # f"<i>¬´{dish['–†–µ—Å—Ç–æ—Ä–∞–Ω']}¬ª, {dish['–ê–¥—Ä–µ—Å']}</i>\n"
                # f"\n"
                f"‚Äî‚Äî {icons[dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']]} <b>{dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}</b> ‚Äî‚Äî\n"
                f"\n"
                f"{icons[length - numb]} <i>{dish['–ù–∞–∑–≤–∞–Ω–∏–µ']}</i>\n\n"
                f"üí∞ <i>–¶–µ–Ω–∞: {dish['–¶–µ–Ω–∞']} —Ä—É–±.</i>\n"
                f"‚öñÔ∏è <i>–í–µ—Å: {str(dish['–ì—Ä–∞–º–º'])} –≥.</i>"
                f"\n\n"
                # f"üßæ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
                # f"<code>{ingredients}</code>\n"
                f"‚Äî‚Äî {icons[dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']]} <b>{dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']}</b> ‚Äî‚Äî\n"
                f"\n"
                f"<blockquote><i>üë®üèº‚Äç‚öïÔ∏è: {dish['–û–ø–∏—Å–∞–Ω–∏–µ'].split(';')[0]}</i></blockquote>\n\n"
                f"üìù–ö–ë–ñ–£ –±–ª—é–¥–∞ :\n <tg-spoiler><i>{dish['–û–ø–∏—Å–∞–Ω–∏–µ'].split(';')[1]}</i></tg-spoiler>\n"
                f"\n"
                f"<i>–õ–∏—Å—Ç–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ¬´ –∏ ¬ªüëáüèª</i>\n\n"
                f"<b>–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–ª—é–¥–æ? –î–æ–±–∞–≤—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí</b>")
        else:
            text = (  # f"üç§ <b>–ö–∞—Ñ–µ:</b>\n"
                # f"<i>¬´{dish['–†–µ—Å—Ç–æ—Ä–∞–Ω']}¬ª, {dish['–ê–¥—Ä–µ—Å']}</i>\n"
                # f"\n"
                f"‚Äî‚Äî {icons[dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']]} <b>{dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}</b> ‚Äî‚Äî\n"
                f"\n"
                f"{icons[length - numb]} <i>{dish['–ù–∞–∑–≤–∞–Ω–∏–µ']}</i>\n\n"
                f"üí∞ <i>–¶–µ–Ω–∞: {dish['–¶–µ–Ω–∞']} —Ä—É–±.</i>\n"
                f"‚öñÔ∏è <i>–í–µ—Å: {str(dish['–ì—Ä–∞–º–º'])} –≥.</i>"
                f"\n\n"
                # f"üßæ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
                # f"<code>{ingredients}</code>\n"
                f"‚Äî‚Äî {icons[dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']]} <b>{dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']}</b> ‚Äî‚Äî\n"
                f"\n"
                f"<blockquote><i>üë®üèº‚Äç‚öïÔ∏è: {dish['–û–ø–∏—Å–∞–Ω–∏–µ'].split(';')[0]}</i></blockquote>\n\n"
                f"üìù–ö–ë–ñ–£ –Ω–∞ 100 –≥. :\n <tg-spoiler><i>{dish['–û–ø–∏—Å–∞–Ω–∏–µ'].split(';')[1]}</i></tg-spoiler>\n"
                f"\n"
                f"<i>–õ–∏—Å—Ç–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ¬´ –∏ ¬ªüëáüèª</i>\n\n"
                f"<b>–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–ª—é–¥–æ? –î–æ–±–∞–≤—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí</b>")
        if db.check_basket_exists(user):
            basket = eval(db.get_basket(user))
            if dish['–ù–∞–∑–≤–∞–Ω–∏–µ'] in basket:
                in_basket = True
            else:
                in_basket = False
        else:
            in_basket = False
        message_obj = await bot.edit_message_text(
            chat_id=user,
            message_id=call.message.message_id,
            text=text,
            reply_markup=buttons_food_05(db.get_client_temp_dish(user), length, numb, in_basket)
        )
        db.set_users_mode(user, message_obj.message_id, 'send_dish')
        db.set_client_can_alert(user, round(time.time()))
        db.set_client_temp_dish_id(user, db.restaurants_get_dish(rest[0], rest[1], dish['–ù–∞–∑–≤–∞–Ω–∏–µ'])[0])
    except Exception as e:
        print(e)


@dp.callback_query_handler(text_contains=f"check_order")
async def check_order(call: types.CallbackQuery):
    try:
        user = call.from_user.id
        text = "‚ùóÔ∏è<b>–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä–∑–∏–Ω—É, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</b> ‚ùóÔ∏è\n\n" \
               "<i><b>–ù–∞–∂–º–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é</b>, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã üö´\n" \
               "<b>–í–µ—Ä–Ω–∏—Å—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –±–ª—é–¥–∞ ‚ûï</i>"
        await bot.edit_message_text(
            chat_id=user,
            message_id=call.message.message_id,
            text=text,
            reply_markup=generate_basket(user)
        )
    except Exception as e:
        print("order error", e)


@dp.callback_query_handler(text_contains=f"create_qr")
async def create_qr(call: types.CallbackQuery):
    user = call.from_user.id

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.delete()

    url = await get_start_link(f"or{user}", encode=True)
    qrcode = pyqrcode.create(url)
    qrcode.png('QR CODE.png', scale=5)
    with open('QR CODE.png', 'rb') as file:
        msg = await bot.send_photo(user, photo=file)
    await bot.send_message(user,
                           text="–ü–æ–∫–∞–∂–∏ —ç—Ç–æ—Ç QR-–∫–æ–¥ <b>–æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É</b>, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ üì•\n\n",
                           reply_markup=create_qr_keyboard(msg["message_id"]),
                           parse_mode='HTML')


@dp.callback_query_handler(text_contains=f"basket")
async def change_basket(call: types.CallbackQuery):
    try:
        user = call.from_user.id
        if not db.check_basket_exists(user):
            db.create_basket(user)
        basket_mode = call.data.split("basket_")[-1]
        dish, length, numb = menu.get_dish(user)
        dish_id = db.get_client_temp_dish_id(user)
        dish = db.restaurants_get_by_id(dish_id)[4]
        basket = eval(db.get_basket(user))
        if basket_mode == "add":
            basket[dish] = dish_id
            in_basket = True
        else:
            try:
                basket.pop(dish, None)
            except ValueError:
                pass
            in_basket = False
        db.set_basket(user, str(basket))
        await bot.edit_message_reply_markup(
            chat_id=user,
            message_id=call.message.message_id,
            reply_markup=buttons_food_05(db.get_client_temp_dish(user), length, numb, in_basket))
    except Exception as e:
        print("basket error", e)


@dp.callback_query_handler(text_contains=f"delete")
async def change_basket(call: types.CallbackQuery):
    try:
        user = call.from_user.id
        dish_id = call.data.split("delete_")[-1]
        dish = db.restaurants_get_by_id(dish_id)[4]
        basket = eval(db.get_basket(user))
        try:
            basket.pop(dish, None)
        except ValueError:
            pass
        db.set_basket(user, str(basket))
        await bot.edit_message_reply_markup(
            chat_id=user,
            message_id=call.message.message_id,
            reply_markup=generate_basket(user))
    except Exception as e:
        print("basket error", e)


@dp.callback_query_handler(text_contains=f"bon_appetite")
async def bon_appetite(call: types.CallbackQuery):
    user = call.from_user.id
    mode = db.get_users_mode(user)['id']
    message_id = call.data.split("bon_appetite")[-1]
    try:
        await bot.delete_message(user, int(message_id))
    except Exception as e:
        print(e)
    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text=f"<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Å–µ—Ä–≤–∏—Å–æ–º <a href='https://t.me/food_2_mood'>food2mood</a>!‚ù§Ô∏è</b>\n\n"
             f"<i>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!</i>",
        reply_markup=bon_appetite_keyboard(),
        parse_mode='HTML'
    )
    db.set_basket(user, "{}")
    db.set_client_can_alert(user, 0)
    db.set_users_mode(user, mode, 'write_review')

    await asyncio.sleep(3600)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 2 –º–∏–Ω—É—Ç—ã 3600
    await bot.delete_message(chat_id=user, message_id=message_obj.message_id)

    await send_reminder_message(user)  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É


async def send_reminder_message(user_id):
    user_first_name = db.get_users_user_first_name(user_id)
    cafe = db.get_client_temp_rest(user_id)
    cafe = cafe.split(":")[0]

    keyboard = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="search_dish")
    btn2 = InlineKeyboardButton(text="–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data="menu_start")
    keyboard.add(btn1, btn2)

    await bot.send_message(
        chat_id=user_id,
        text=f"<b>{user_first_name}</b>, —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Ç–∞–Ω–∏—è —É –Ω–∞—à–µ–≥–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞ <strike>5000 —Ä—É–±/—á–∞—Å</strike> —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ? ü§´üÜì\n\n–¢–æ–≥–¥–∞ –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –æ –∫–∞—Ñ–µ <b>{cafe}</b>!\n\n–ó–∞ —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã –Ω–∞—á–∏—Å–ª–∏–º —Ç–µ–±–µ f2m –∫–æ–∏–Ω—ã ü™ô\n\n"
             f"–ù–∞–∫–æ–ø–∏–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ f2m –∫–æ–∏–Ω–æ–≤, —Ç—ã —Å–º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —É –Ω–∞—à–µ–≥–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞ üßë‚Äç‚öïÔ∏èü©∫ü•ô",
        reply_markup=keyboard
    )


def bon_appetite_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="¬´¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                                callback_data="menu_start")

    btn2 = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                callback_data="food_rec")

    btn3 = InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º", callback_data="send_dish")

    keyboard.row(btn1)
    keyboard.row(btn2)
    keyboard.row(btn3)
    return keyboard


def create_qr_keyboard(message_id):
    keyboard = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ!",
                                callback_data=f"bon_appetite{message_id}")

    btn2 = InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º",
                                callback_data=f"send_dish_del{message_id}")

    keyboard.row(btn1)
    keyboard.row(btn2)
    return keyboard


def generate_basket(user):
    try:
        if db.check_basket_exists(user):
            basket = eval(db.get_basket(user))
        else:
            basket = {}
        keyboard = InlineKeyboardMarkup(row_width=1)
        if len(basket) > 0:
            for dish in basket:
                btn = InlineKeyboardButton(text=str(dish),
                                           callback_data=f"delete_{basket[dish]}")
                keyboard.row(btn)
            btn1 = InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º", callback_data="send_dish")
            btn2 = InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ÄºÔ∏è",
                                        callback_data="create_qr")
            keyboard.row(btn1)
            keyboard.row(btn2)
        else:
            btn0 = InlineKeyboardButton(text="¬´ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", callback_data="send_dish")
            keyboard.row(btn0)
        return keyboard
    except Exception as e:
        print("generate error", e)


import asyncio
from aiogram import types


@dp.callback_query_handler(text_contains="search_dish")
async def search_dish_global(call: types.CallbackQuery):
    user = call.from_user.id
    mode = db.get_users_mode(user)['id']

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.delete()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    message = await bot.send_message(
        chat_id=user,
        text="–ù–∞–π–¥–∏—Ç–µ –±–ª—é–¥–æ –≤ –ø–æ–∏—Å–∫–µ üîé",
        reply_markup=search_dish_keyboard()
    )

    db.set_client_can_alert(user, 0)
    db.set_users_mode(user, mode, 'write_review')

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    await schedule_message_deletion(message)


async def schedule_message_deletion(message):
    await asyncio.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 —Å–µ–∫—É–Ω–¥
    await message.delete()


def search_dish_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)

    search_activate_button = InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –±–ª—é–¥ üîç", switch_inline_query_current_chat='')
    keyboard.add(search_activate_button)

    return keyboard


def buttons_food_05(dish: int | None, length: int | None, last: int | None, in_basket: bool | None = None):
    menu = InlineKeyboardMarkup(row_width=3)
    if dish is not None and length != 1:
        if dish > 0:
            btn1 = InlineKeyboardButton(text=f"¬´ {length - last - 1}",
                                        callback_data="send_dish_back")

            if last == 0:
                menu.row(btn1)
            else:
                btn2 = InlineKeyboardButton(text=f"{length - last + 1} ¬ª",
                                            callback_data="send_dish_next")
                menu.row(btn1, btn2)

        else:
            btn2 = InlineKeyboardButton(text=f"{length - last + 1} ¬ª",
                                        callback_data="send_dish_next")
            menu.add(btn2)
        if in_basket:
            btn0 = InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ üõí",
                                        callback_data=f"basket_remove")
        else:
            btn0 = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ üõí",
                                        callback_data=f"basket_add")
        menu.add(btn0)
    # menu_start
    btn1 = InlineKeyboardButton(text="¬´ –ü–æ–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                callback_data="food_rec")

    btn2 = InlineKeyboardButton(text="¬´¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                                callback_data="menu_start")

    btn3 = InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ‚ùóÔ∏è", callback_data="check_order")
    menu.add(btn1)
    menu.add(btn2)
    menu.add(btn3)
    return menu


"""
–ü—Ä–æ–º–æ–∫–æ–¥
"""
#
# import string
#
#
# def generate_promo_code():
#     return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
#
#
# @dp.callback_query_handler(lambda c: c.data == '12345')
# async def process_callback_12345(callback_query: types.CallbackQuery):
#     user_id = callback_query.from_user.id
#
#     user_reg_time_str = db.get_users_user_reg_time(user_id)
#     user_reg_time = datetime.datetime.strptime(user_reg_time_str, "%Y-%m-%d %H:%M:%S")
#     current_datetime = datetime.datetime.now()
#
#     if user_reg_time.date() == current_datetime.date():
#         promo_code = generate_promo_code()
#         message_text = (
#             f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n"
#             "\n"
#             "–°–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–≤–æ–µ–º—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 5% –Ω–∞ –≤–µ—Å—å –∑–∞–∫–∞–∑!"
#         )
#         await bot.send_message(callback_query.from_user.id, message_text)
#
#     else:
#         await bot.send_message(callback_query.from_user.id,
#                                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


"""
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–ª—é–¥–∞
"""


@dp.callback_query_handler(text_contains=f"food_choose_random")
async def food_choose_random(call: types.CallbackQuery):
    user = call.from_user.id
    data = call.data.split('_')
    if db.get_users_ban(user):
        return None

    # –î–µ–π—Å—Ç–≤–∏–µ:
    dish, len_dish = menu.get_recommendation(user)

    if dish is not None:
        # ingredients = ""
        # for ing in dish['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã'].split(','):
        #     ingredients += f"‚Ä¢ {str(ing).strip()}\n"

        message_obj = await bot.edit_message_text(
            chat_id=user,
            message_id=call.message.message_id,
            text=f"–£—á–∏—Ç—ã–≤–∞—è —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å üòåüëáüèª\n"
                 f"\n"
                 f"üç§ <b>–ö–∞—Ñ–µ:</b>\n"
                 f"<i>¬´{dish['–†–µ—Å—Ç–æ—Ä–∞–Ω']}¬ª, {dish['–ê–¥—Ä–µ—Å']}</i>\n"
                 f'<a href="{dish["–°—Å—ã–ª–∫–∞"]}">‚û°Ô∏è –£–∑–Ω–∞—Ç—å –≤—Å—ë –º–µ–Ω—é –∑–∞–≤–µ–¥–µ–Ω–∏—è</a>'
                 f"\n"
                 f"–ò –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–∞–º ‚ò∫Ô∏èüå∏\n"
                 f"\n"
                 f"‚Äî‚Äî‚Äî {icons[dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']]} <b>{dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}</b> ‚Äî‚Äî‚Äî\n"
                 f"\n"
                 f"üí´ <i>¬´{dish['–ù–∞–∑–≤–∞–Ω–∏–µ']}¬ª</i>\n"
                 f"\n"
            # f"üßæ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
            # f"<code>{ingredients}</code>\n"
                 f"‚Äî‚Äî‚Äî {icons[dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']]} <b>{dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']}</b> ‚Äî‚Äî‚Äî\n"
                 f"\n"
                 f"üó£Ô∏è: <i>{dish['–û–ø–∏—Å–∞–Ω–∏–µ']}</i> \n"
                 f"\n",
            reply_markup=buttons_food_06(True, len_dish)
        )
        db.set_client_can_alert(user, round(time.time()))
        db.set_client_temp_dish_id(user, db.restaurants_get_dish(dish['–†–µ—Å—Ç–æ—Ä–∞–Ω'], dish['–ê–¥—Ä–µ—Å'], dish['–ù–∞–∑–≤–∞–Ω–∏–µ'])[0])
        db.set_users_mode(user, message_obj.message_id,
                          'food_choose_random')
    else:
        message_obj = await bot.edit_message_text(
            chat_id=user,
            message_id=call.message.message_id,
            text=f"<b>–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b> üí´\n",
            reply_markup=buttons_food_06(False, 0)
        )
        db.set_users_mode(user, message_obj.message_id, 'food_choose_random')


def buttons_food_06(full: bool = True, len_dish: int = 0):
    menu = InlineKeyboardMarkup(row_width=3)

    if full and len_dish > 1:
        btn1 = InlineKeyboardButton(text="–ü–æ–º–µ–Ω—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é üí´",
                                    callback_data="food_choose_random")
        menu.add(btn1)

    btn2 = InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                callback_data="food_choose_get")

    btn3 = InlineKeyboardButton(text="¬´¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                                callback_data="menu_start")
    menu.add(btn2)
    menu.add(btn3)

    return menu
