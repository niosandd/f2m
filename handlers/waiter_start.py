import logging
import random

import datetime
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup

from main import dp, bot, db, config, Tools

admin = config()['telegram']['admin']

"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /waiter
"""


def waiter_action(first_name, location):
    print(f"‚îÇ [{Tools.timenow()}] {first_name} ‚Üí {location}")


def ind_to_number(ind):
    numbers = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]
    result = ""
    for char in str(ind):
        result += numbers[int(char)]
    return result


async def start(message: types.Message):
    user = message.from_user.id
    try:
        info = message.text.split("/")
        name = info[0].split()
        rest = info[1]
        # –ù–æ–≤—ã–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç:
        if not db.check_waiter_exists(user):
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:
            db.add_waiter(
                user,
                rest,
                f'tg://user?id={user}',
                message.from_user.username,
                name[0],
                name[1],
                name[2]
            )
            text = f'\nüôãüèª‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç:' \
                   f'\n' \
                   f'\n<b>–†–µ—Å—Ç–æ—Ä–∞–Ω {rest}</b>' \
                   f'\n<b>{name[0]} {name[1]} {name[2]}</b>' \
                   f'\n@{message.from_user.username}' \
                   f'\nid <a href="tg://user?id={user}">{user}</a>' \
                   f'\n'
            await bot.send_message(user, text)
        else:
            text = f'\n–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–∞—Å—å) –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç'
            await bot.send_message(user, text)
    except Exception:
        text = f'\n–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û/—Ä–µ—Å—Ç–æ—Ä–∞–Ω'
        await bot.send_message(user, text)


async def get_order(message: types.Message, order):
    user = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:
    if db.check_waiter_exists(user):
        name = db.get_users_user_first_name(order) + " " + db.get_users_user_last_name(order)
        if not db.get_waiter_score(user):
            temp_list = [order]
        else:
            temp_list = eval(db.get_waiter_score(user))
            temp_list.append(order)
        db.set_waiter_score(user, str(temp_list))
        try:
            basket = list(eval(db.get_basket(order)).keys())
        except Exception as e:
            print("waiter error", e)
            basket = []
        order_text = ""
        for i in range(len(basket)):
            order_text += ind_to_number(i + 1) + " " + basket[i] + "\n"
        text = f'\n<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>' \
               f'\n\n' \
               f'{order_text}' \
               f'\n <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(set(temp_list))}</b>'
        await bot.send_message(user, text)


"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /waiter
"""
