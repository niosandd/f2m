from datetime import datetime
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup

from main import dp, bot, db
import handlers.stop_lists as sl
import handlers.auxiliary_functions as af


temp_review = -1

async def generate_admin_menu(admin_id, rest=None, message_id=None):
    mode = db.get_users_mode(admin_id)
    if not db.check_admin_exists(admin_id):
        db.add_admin(admin_id, rest)
    elif rest:
        db.set_admin_rest(admin_id, rest)
    text = "–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: "
    if message_id or mode['key'] == 'admin_mode':
        if mode['key'] == 'admin_mode':
            message_obj = await bot.edit_message_text(chat_id=admin_id,
                                                      message_id=mode['id'],
                                                      text=text,
                                                      reply_markup=admin_menu())
        else:
            message_obj = await bot.edit_message_text(chat_id=admin_id,
                                                  message_id=message_id,
                                                  text=text,
                                                  reply_markup=admin_menu())
    else:
        message_obj = await bot.send_message(
            chat_id=admin_id,
            text=text,
            reply_markup=admin_menu()
        )
    db.set_users_mode(admin_id, message_obj.message_id, 'admin_menu')


def admin_menu():
    menu = InlineKeyboardMarkup(row_width=1)
    btn1 = InlineKeyboardButton(text="–°–¢–û–ü-–õ–ò–°–¢", callback_data="admin_stop_list")
    btn2 = InlineKeyboardButton(text="–û–§–ò–¶–ò–ê–ù–¢–´", callback_data="admin_waiters_stat")
    btn3 = InlineKeyboardButton(text="–†–ï–ö–õ–ê–ú–ê", callback_data="admin_commercial")
    btn4 = InlineKeyboardButton(text="–û–¢–ó–´–í–´", callback_data="admin_reviews")
    btn5 = InlineKeyboardButton(text="–†–ê–°–°–´–õ–ö–ê", callback_data="admin_notification")
    btn6 = InlineKeyboardButton(text='–í–ï–†–ù–£–¢–¨–°–Ø –ù–ê –ì–õ–ê–í–ù–£–Æ', callback_data='return_to_choice_of_restaurant')
    menu.add(btn1, btn2, btn3, btn4, btn5, btn6)
    return menu


@dp.callback_query_handler(lambda call: call.data == "admin_waiters_stat")
async def admin_waiters_stat(call: types.CallbackQuery):
    try:
        admin_id = call.from_user.id
        rest = db.get_admin_rest(admin_id)
        stats = db.get_waiters_names_and_stats(rest)
        text = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º:\n\n"
        for waiter in stats:
            if None not in waiter:
                current_waiter_count = db.get_current_waiter_guests(rest, waiter[0])
                text += (
                    f"{waiter[1]} {waiter[2]} {waiter[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(set(eval(waiter[4])))} "
                    f"({current_waiter_count})\n\n")
        text += "(–í —Å–∫–æ–±–∫–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–º–µ–Ω—É —Å 00:00 –¥–æ 23:59)"
        await bot.edit_message_text(chat_id=admin_id,
                                    message_id=call.message.message_id,
                                    text=text,
                                    reply_markup=InlineKeyboardMarkup().row(
                                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")))
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == "admin_commercial")
async def admin_commercial(call: types.CallbackQuery):
    try:
        admin_id = call.from_user.id
        rest = db.get_admin_rest(admin_id)
        total_click_count, current_click_count, total_guests_count, current_guests_count = af.total_and_current_counter(
            rest)
        text = (f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∑–∞–≤–µ–¥–µ–Ω–∏—é:\n\n"
                f"–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫: {total_click_count} ({current_click_count})\n\n"
                f"–û–±—Å–ª—É–∂–µ–Ω–æ –≥–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ f2m: {total_guests_count} ({current_guests_count})\n"
                "(–í —Å–∫–æ–±–∫–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–º–µ–Ω—É —Å 00:00 –¥–æ 23:59)")

        await bot.edit_message_text(chat_id=admin_id,
                                    message_id=call.message.message_id,
                                    text=text,
                                    reply_markup=InlineKeyboardMarkup().row(
                                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")))
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == "admin_stop_list")
async def admin_stop_list(call: types.CallbackQuery):
    admin_id = call.from_user.id
    rest = db.get_admin_rest(admin_id)
    if not db.check_stop_list_exists(rest):
        db.create_stop_list(rest)
    await sl.set_stop_list(admin_id, "admin", call.message.message_id)


@dp.callback_query_handler(lambda call: call.data == "back_to_admin_menu")
async def back_to_admin_menu(call: types.CallbackQuery):
    await generate_admin_menu(call.from_user.id, message_id=call.message.message_id)


@dp.callback_query_handler(text_contains="go_to")
async def go_to_review(call: types.CallbackQuery):
    global temp_review
    admin_id = call.from_user.id
    rest_name = db.get_admin_rest(admin_id).split(":")[0]
    reviews = db.get_reviews(rest_name)
    if 'next' in call.data:
        temp_review -= 1
    else:
        temp_review += 1
    text = ""
    review = reviews[temp_review]
    if review[0] and review[0] != "None" and review[1] and review[1] != "None":
        text += f"üìÖ <b>**</b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:<b>**</b>   {review[0].split()[1]}  {format_date(review[0].split()[0])}\n"
        text += f"üçΩÔ∏è <b>**</b>–ë–ª—é–¥–æ:<b>**</b>   {review[1]}\n"
        if review[2] and review[2] != "None":
            rating_stars = "‚≠ê" * review[2]
            text += f"üåü <b>**</b>–û—Ü–µ–Ω–∫–∞:<b>**</b>   {rating_stars} ({review[2]}/5)\n"
        if review[3] and review[3] != "None":
            text += f"üí¨ <b>**</b>–ú–Ω–µ–Ω–∏–µ:<b>**</b>   \"{review[3]}\"\n\n"
    if temp_review == 0:
        await bot.edit_message_text(chat_id=admin_id,
                                message_id=call.message.message_id,
                                text=text,
                                reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–∑—ã–≤",
                                                                                             callback_data="go_to_last_review"),
                                                                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                                                             callback_data="back_to_admin_menu")))
    elif 1 <= temp_review < len(reviews) - 1:
        await bot.edit_message_text(chat_id=admin_id,
                                    message_id=call.message.message_id,
                                    text=text,
                                    reply_markup=InlineKeyboardMarkup().row(
                                        InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–∑—ã–≤",
                                                             callback_data="go_to_last_review"),
                                        InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤",
                                                             callback_data="go_to_next_review"),
                                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                             callback_data="back_to_admin_menu")))
    else:
        await bot.edit_message_text(chat_id=admin_id,
                                    message_id=call.message.message_id,
                                    text=text,
                                    reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤",
                                                             callback_data="go_to_next_review"),
                                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                             callback_data="back_to_admin_menu")))



@dp.callback_query_handler(lambda call: call.data == "next_review")
async def back_to_admin_menu(call: types.CallbackQuery):
    await bot.edit_message_text()

def format_date(date_str):
    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
        7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    day = date_obj.day
    month = months[date_obj.month]
    year = date_obj.year
    return f"{day} {month} {year} –≥–æ–¥a"

@dp.callback_query_handler(lambda call: call.data == "admin_reviews")
async def admin_reviews(call: types.CallbackQuery):
    global temp_review
    admin_id = call.from_user.id
    rest_name = db.get_admin_rest(admin_id).split(":")[0]
    reviews = db.get_reviews(rest_name)
    temp_review = len(reviews) - 1
    if reviews:
        text = ""
        review = reviews[temp_review]
        if review[0] and review[0] != "None" and review[1] and review[1] != "None":
            text += f"üìÖ <b>**</b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:<b>**</b>   {review[0].split()[1]}  {format_date(review[0].split()[0])}\n"
            text += f"üçΩÔ∏è <b>**</b>–ë–ª—é–¥–æ:<b>**</b>   {review[1]}\n"
            if review[2] and review[2] != "None":
                rating_stars = "‚≠ê" * review[2]
                text += f"üåü <b>**</b>–û—Ü–µ–Ω–∫–∞:<b>**</b>   {rating_stars} ({review[2]}/5)\n"
            if review[3] and review[3] != "None":
                text += f"üí¨ <b>**</b>–ú–Ω–µ–Ω–∏–µ:<b>**</b>   \"{review[3]}\"\n\n"
    else:
        text = "–û—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    if len(reviews) > 1:
        await bot.edit_message_text(chat_id=admin_id,
                                message_id=call.message.message_id,
                                text=text,
                                reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤",
                                                                                             callback_data="go_to_next_review"),
                                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")))
    else:
        await bot.edit_message_text(chat_id=admin_id,
                                    message_id=call.message.message_id,
                                    text=text,
                                    reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                                                                 callback_data="back_to_admin_menu")))

@dp.callback_query_handler(lambda call: call.data == "admin_notification")
async def admin_notification(call: types.CallbackQuery):
    admin_id = call.from_user.id
    message_obj = await bot.send_message(
        chat_id=admin_id,
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
    )
    db.set_users_mode(admin_id, message_obj.message_id, 'notification')


@dp.callback_query_handler(lambda call: call.data == 'return_to_choice_of_restaurant')
async def return_to_choice_of_restaurant(call: types.CallbackQuery):
    admin_id = call.from_user.id
    message_obj = await bot.edit_message_text(chat_id=admin_id,
                                message_id=call.message.message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:',
                                reply_markup=InlineKeyboardMarkup().add(
                                    InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –∫–∞—Ñ–µ", switch_inline_query_current_chat='')))
    db.set_users_mode(admin_id, message_obj.message_id, 'admin_mode')
